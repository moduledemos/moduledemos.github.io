{"id":658,"date":"2019-12-01T17:48:41","date_gmt":"2019-12-02T01:48:41","guid":{"rendered":"http:\/\/35.245.164.103\/?p=658"},"modified":"2019-12-06T18:28:17","modified_gmt":"2019-12-07T02:28:17","slug":"mockery-mock-everything-in-go","status":"publish","type":"post","link":"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/","title":{"rendered":"Mockery; Mock Everything In Go."},"content":{"rendered":"\n<p><a href=\"https:\/\/github.com\/vektra\/mockery\">Mockery is an awesome tool<\/a> that offers the ability to generate mocks from Go interfaces. Additionally, it&#8217;s output uses the <a href=\"http:\/\/35.245.164.103\/testify-test-your-go-code\/\">testify<\/a> framework, so you can easily plug in your mocks and perform granular tests on your code. When combined with the power of a Makefile, it makes mocking a breeze. <\/p>\n\n\n\n<h2>The Makefile<\/h2>\n\n\n\n<p>Some people might be turned off by the use of a makefile. However, it is going to make this significantly more convenient, especially as your project grows.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">GOC=go\nGO111MODULE=on\n\nDIRECTORIES=$(sort $(dir $(wildcard pkg\/*\/*\/)))\nMOCKS=$(foreach x, $(DIRECTORIES), mocks\/$(x))\n\n.PHONY: all test clean-mocks mocks\n\nall: demo\n\ndemo:\n\t$(GOC) build -o demo\n\ntest: | mocks\n\tgo test .\/...\n\nclean-mocks:\n\trm -rf mocks\n\nmocks: $(MOCKS)\n\t\n$(MOCKS): mocks\/% : %\n\tmockery -output=$@ -dir=$^ -all<\/pre>\n\n\n\n<p>This makefile takes all of the subdirectories which match the pattern &#8220;pkg\/*\/*&#8221; and then matches them with an output to be in the folder <code>mocks\/pkg\/..<em>.<\/em><\/code> .  For each of these pairs, it makes a call to mockery with the -all flag. This flag tells it to mock all of the interfaces in a directory. <\/p>\n\n\n\n<h2>The Go Code to Mock<\/h2>\n\n\n\n<p>For this example, we will have a Teller struct, which exports a method Tell. This method takes in a story and reads it chapter by chapter to an audience far and wide. Here is what the story interface and Teller struct look like.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">type Story interface {\n\tReadChapter(chapter int) ([]byte, error)\n\tHasChapter(chapter int) bool\n}<\/pre>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">type Teller struct {\n}\n\nfunc (teller Teller) say(words []byte) {\n\t\/\/Pretend this makes it talk\n}\n\nfunc (teller Teller) Tell(story Story) error {\n\tfor i := 0; story.HasChapter(i); i++ {\n\t\twords, err := story.ReadChapter(i)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tteller.say(words)\n\t}\n\treturn nil\n}<\/pre>\n\n\n\n<p>How can you make sure that the Teller reads every single chapter until there are no more in the story? You mock the story! First, you must generate the mocks with the command <code>make mocks<\/code> (or you can just run the test with <code>make test<\/code>, it knows to make the calls to mockery first). Here is our tester code for the Teller.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"14-15,17, 19, 23\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">import (\n\t\"testing\"\n\n\tdemoMock \"github.com\/moduledemos\/mockery-demo\/mocks\/pkg\/demo\"\n\n\t\"github.com\/stretchr\/testify\/assert\"\n\t\"github.com\/stretchr\/testify\/mock\"\n)\n\nfunc TestTeller_Tell(t *testing.T) {\n\tteller := Teller{}\n\tstory := new(demoMock.Story)\n\tnoChapters := 20\n\tstory.On(\"ReadChapter\", mock.Anything).Return(\n\t\t[]byte(\":)\"), nil).Times(noChapters)\n\tfor i := 0; i &lt; noChapters; i++ {\n\t\tstory.On(\"HasChapter\", i).Return(true).Once()\n\t}\n\tstory.On(\"HasChapter\", noChapters).Return(false).Once()\n\terr := teller.Tell(story)\n\tassert.NoError(t, err)\n\n\tstory.AssertExpectations(t)\n}<\/pre>\n\n\n\n<p>You can see that we can mock different return values for the <code>HasChapter<\/code> function based on the input given to it. Additionally, you might notice <code>.Times(n)<\/code> or <code>.Once<\/code> appended to the call to <code>.On<\/code>. When combined with the call to <code>AssertExpectations<\/code> at the end, this enforces the number of times each variation is called. <\/p>\n\n\n\n<p>If it does not matter what the input is, you can use the global <code>mock.Anything<\/code> from the <a href=\"https:\/\/github.com\/stretchr\/testify\">testify library<\/a> to match with any given input. With all of these features, I was able to create a test that ensured that all of the chapters would be read until the function HasChapter returned false. All of this, in just ~12 lines of code. If you like doing more work with less code, then I highly recommend using mockery and testify for all of your Go testing needs.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Mockery is an awesome tool that offers the ability to generate mocks from Go interfaces. Additionally, it&#8217;s output uses the testify framework, so you can easily plug in your mocks and perform granular tests on your code. When combined with the power of a Makefile, it makes mocking a breeze. The Makefile Some people might [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":659,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_et_pb_use_builder":"off","_et_pb_old_content":"","_et_gb_content_width":""},"categories":[6],"tags":[9,284,283,232],"yst_prominent_words":[278,266,138,279,280,260,281,263,261,282,265,264,256,258,245,267,270,268,269,234],"yoast_head":"<!-- This site is optimized with the Yoast SEO Premium plugin v14.1 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Mockery; Mock Everything In Go. - Module Safari<\/title>\n<meta name=\"description\" content=\"Mockery is an awesome tool that offers the ability to easily generate mocks from Go interfaces. Additionally, it uses the testify framework...\" \/>\n<meta name=\"robots\" content=\"index, follow\" \/>\n<meta name=\"googlebot\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<meta name=\"bingbot\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Mockery; Mock Everything In Go. - Module Safari\" \/>\n<meta property=\"og:description\" content=\"Mockery is an awesome tool that offers the ability to easily generate mocks from Go interfaces. Additionally, it uses the testify framework...\" \/>\n<meta property=\"og:url\" content=\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/\" \/>\n<meta property=\"og:site_name\" content=\"Module Safari\" \/>\n<meta property=\"article:published_time\" content=\"2019-12-02T01:48:41+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-12-07T02:28:17+00:00\" \/>\n<meta property=\"og:image\" content=\"http:\/\/35.245.164.103\/wp-content\/uploads\/2019\/12\/mocking-bird.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"640\" \/>\n\t<meta property=\"og:image:height\" content=\"417\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Organization\",\"@id\":\"http:\/\/35.245.164.103\/#organization\",\"name\":\"Module Safari\",\"url\":\"http:\/\/35.245.164.103\/\",\"sameAs\":[],\"logo\":{\"@type\":\"ImageObject\",\"@id\":\"http:\/\/35.245.164.103\/#logo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/35.245.164.103\/wp-content\/uploads\/2019\/11\/PNG-Logo-02-not-transparent.png\",\"width\":2026,\"height\":530,\"caption\":\"Module Safari\"},\"image\":{\"@id\":\"http:\/\/35.245.164.103\/#logo\"}},{\"@type\":\"WebSite\",\"@id\":\"http:\/\/35.245.164.103\/#website\",\"url\":\"http:\/\/35.245.164.103\/\",\"name\":\"Module Safari\",\"description\":\"development simplified\",\"publisher\":{\"@id\":\"http:\/\/35.245.164.103\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"http:\/\/35.245.164.103\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/35.245.164.103\/wp-content\/uploads\/2019\/12\/mocking-bird.jpg\",\"width\":640,\"height\":417,\"caption\":\"mock\"},{\"@type\":\"WebPage\",\"@id\":\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/#webpage\",\"url\":\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/\",\"name\":\"Mockery; Mock Everything In Go. - Module Safari\",\"isPartOf\":{\"@id\":\"http:\/\/35.245.164.103\/#website\"},\"primaryImageOfPage\":{\"@id\":\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/#primaryimage\"},\"datePublished\":\"2019-12-02T01:48:41+00:00\",\"dateModified\":\"2019-12-07T02:28:17+00:00\",\"description\":\"Mockery is an awesome tool that offers the ability to easily generate mocks from Go interfaces. Additionally, it uses the testify framework...\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/\"]}]},{\"@type\":\"Article\",\"@id\":\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/#article\",\"isPartOf\":{\"@id\":\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/#webpage\"},\"author\":{\"@id\":\"http:\/\/35.245.164.103\/#\/schema\/person\/a31876f85a9f031cf62afd4e79f746aa\"},\"headline\":\"Mockery; Mock Everything In Go.\",\"datePublished\":\"2019-12-02T01:48:41+00:00\",\"dateModified\":\"2019-12-07T02:28:17+00:00\",\"commentCount\":1,\"mainEntityOfPage\":{\"@id\":\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/#webpage\"},\"publisher\":{\"@id\":\"http:\/\/35.245.164.103\/#organization\"},\"image\":{\"@id\":\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/#primaryimage\"},\"keywords\":\"golang,mockery,mocking,testing\",\"articleSection\":\"Golang\",\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"http:\/\/35.245.164.103\/mockery-mock-everything-in-go\/#respond\"]}]},{\"@type\":[\"Person\"],\"@id\":\"http:\/\/35.245.164.103\/#\/schema\/person\/a31876f85a9f031cf62afd4e79f746aa\",\"name\":\"Nathaniel Blakely\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"http:\/\/35.245.164.103\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"http:\/\/1.gravatar.com\/avatar\/1d85a4c5bf257b6a8972ab9bbaee0b51?s=96&d=mm&r=g\",\"caption\":\"Nathaniel Blakely\"}}]}<\/script>\n<!-- \/ Yoast SEO Premium plugin. -->","_links":{"self":[{"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/posts\/658"}],"collection":[{"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/comments?post=658"}],"version-history":[{"count":22,"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/posts\/658\/revisions"}],"predecessor-version":[{"id":699,"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/posts\/658\/revisions\/699"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/media\/659"}],"wp:attachment":[{"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/media?parent=658"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/categories?post=658"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/tags?post=658"},{"taxonomy":"yst_prominent_words","embeddable":true,"href":"http:\/\/35.245.164.103\/wp-json\/wp\/v2\/yst_prominent_words?post=658"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}